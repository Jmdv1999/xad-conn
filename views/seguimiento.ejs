<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Dispositivos</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>

<body>
    <script>
        var tiempo = 1
        const dispositivosSeleccionados = [];
        var zonas = []

        //contaderes para utilizar adelante, cuando los dispositivos esten fuera de la zona asignada
        var contadores = {
            Ranger: 0,
            Fortaleza: 0,
            Hilux: 0,
            Mazda: 0
        }
        var colores = {
            Fortaleza: "green",
            Mazda: "pink",
            Hilux: "blue",
            Ranger: "red"
        }
        function cambiarTiempo() {

            tiempo = document.getElementById('tiempo').value
        }

        //aqui guardaremos la ubicacion de los marcadores a imprimir en el mapa
        var marcadores = [];

        //Para poder hacer instanciaciones del mapa
        var map;

        //Equipos registrados en la base de datos
        var dispositivos = JSON.parse('<%-(dispositivos) %>');

        //Coordenadas
        Ballena = JSON.parse('<%-(Ballena) %>')
        Casco_Central_Uno = JSON.parse('<%-(Casco_Central_Uno) %>')
        Casitas_Cementerio = JSON.parse('<%-(Casitas_Cementerio) %>')
        Excepciones = JSON.parse('<%-(Excepciones) %>')
        Guarico = JSON.parse('<%-(Guarico) %>')
        Nueva_Miranda = JSON.parse('<%-(Nueva_Miranda) %>')
        Salinas = JSON.parse('<%-(Salinas) %>')
        San_Crispulo = JSON.parse('<%-(San_Crispulo) %>')

        const zonasAsignadas = {}

        document.addEventListener('DOMContentLoaded', () => {

            const dispositivosList = document.getElementById('dispositivos-list');
            dispositivos.forEach(dispositivo => {
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = dispositivo.id_dispositivo;
                checkbox.id = `checkbox-${dispositivo.id_dispositivo}`;
                // Puedes agregar más atributos o estilos según tus necesidades

                const label = document.createElement('label');
                label.htmlFor = `checkbox-${dispositivo.id_dispositivo}`;
                label.textContent = dispositivo.vehiculo;

                dispositivosList.appendChild(checkbox);
                dispositivosList.appendChild(label);
            });
            map = L.map('map').setView([10.719891, -71.515795], 16);

            L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            }).addTo(map);


            dispositivos.forEach(dispositivo => {
                const checkbox = document.getElementById(`checkbox-${dispositivo.id_dispositivo}`);
                checkbox.addEventListener('change', () => {
                    if (checkbox.checked) {
                        // Si está seleccionado, agrega el dispositivo al arreglo
                        dispositivosSeleccionados.push(dispositivo);

                    } else {
                        // Si se deselecciona, elimina el dispositivo del arreglo
                        const index = dispositivosSeleccionados.findIndex(d => d.id_dispositivo === dispositivo.id_dispositivo);
                        if (index !== -1) {
                            dispositivosSeleccionados.splice(index, 1);
                        }
                    }
                    ejecutar();
                });
            });

            setInterval(() => {
                ejecutar();
            }, tiempo * 60 * 1000);
        });

        function ejecutar() {
            marcadores.forEach(marcador => {
                map.removeLayer(marcador);
            });
            marcadores = []; // Limpiamos la lista de marcadores

            dispositivosSeleccionados.forEach(seleccionado => {
                //console.log(seleccionado)
                realizarPeticion(seleccionado.id_dispositivo, seleccionado.vehiculo);

            });
        }

        function realizarPeticion(id_dispositivo, vehiculo) {
            const url = `http://localhost:3000/api/dispositivo/${id_dispositivo}`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    let datos = JSON.parse(data);
                    if (datos.latitude && datos.longitude) {
                        let lat = parseFloat(datos.latitude);
                        let lng = parseFloat(datos.longitude);

                        var currentMarker = L.marker([lat, lng]).addTo(map).bindTooltip(vehiculo).openTooltip()
                        marcadores.push(currentMarker); // Agregamos el nuevo marcador a la lista

                        fetch(`http://localhost:3000/verificar-zona/${id_dispositivo}`)
                            .then(response => response.json())
                            .then(data => {
                                zonas = data["zonas_asignadas"]
                                zonas.forEach(zonaAsignada => {
                                    if (zonaAsignada != "") {
                                        let coordenadasZona = zona(zonaAsignada.replace(/\s+/g, "_"))
                                        var zonaPolygon = L.polygon(coordenadasZona)
                                        zonasAsignadas[id_dispositivo] = zonaPolygon;
                                        const indiceAleatorio = Math.floor(Math.random() * colores.length);
                                        pintarZona(coordenadasZona, colores[vehiculo])
                                    }

                                });



                            })
                            .catch(error => console.error('Error:', error));


                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function pintarZona(zona, color = "red") {
            for (element in zona) {
                for (const dispositivoId in zonasAsignadas) {
                    const zonaAsignada = zonasAsignadas[dispositivoId];
                    if (!zonaAsignada) {
                        // Si no hay zona asignada, elimina el polígono correspondiente
                        map.removeLayer(zonaAsignada);
                    }
                }

                L.polygon(zona[element], { color: color }).addTo(map)
            }
        }

        function zona(zonaasignada) {
            switch (zonaasignada) {
                case 'Nueva_Miranda':
                    return Nueva_Miranda;
                    break;
                case 'Salinas':
                    return Salinas;
                    break;
                case 'Guarico':
                    return Guarico;
                    break;
                case 'Casco_Central_Uno':
                    return Casco_Central_Uno;
                    break;
                case 'Ballena':
                    return Ballena;
                    break;
                case 'Guarico':
                    return Casitas_Cementerio;
                    break;
                case 'San_Crispulo':
                    return San_Crispulo;
                    break;
                default:
                    break;
            }
        }


    </script>

    <div id="dispositivos-list">

    </div>
    <input type="number" name="tiempo" id="tiempo">
    <button onclick="cambiarTiempo()">Cambiar tiempo de actualizacion</button>
    <div id="map"></div>

    <style>
        #map {
            height: 800px;
            width: 100%;
        }
    </style>

</body>

</html>