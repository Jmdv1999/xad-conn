<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPS || CONNECTIONSEyT</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>

<body class="h-screen ">
    <div class="navbar bg-base-100 ixed">
        <div class="navbar-start">
            <div class="dropdown">
                <div tabindex="0" role="button" class="btn btn-ghost lg:hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M4 6h16M4 12h8m-8 6h16" />
                    </svg>
                </div>
                <ul tabindex="0"
                    class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                    <li><a href="/asignar-tecnico">Asignar Vehiculo a tecnico</a></li>
                    <li><a href="/asignacion">Asignar zona a Vehiculo</a></li>
                    <li><a href="/">Monitorear</a></li>
                </ul>
            </div>
            <a class="btn btn-ghost text-xl">ConnectionsEyT</a>
        </div>
        <div class="navbar-end hidden lg:flex">
            <ul class="menu menu-horizontal px-1">
                <li><a href="/asignar-tecnico">Asignar Vehiculo a tecnico</a></li>
                <li><a href="/asignacion">Asignar zona a Vehiculo</a></li>
                <li><a href="/">Monitorear</a></li>
            </ul>
        </div>
    </div>
    <main class="h-screen flex flex-col">
        <div id="container-form" class="w-full p-6">
            <div id="dispositivos-list" class="flex flex-row">
            </div>
            <input type="number" name="tiempo" id="tiempo" placeholder="Cambiar tiempo de actualizacion"
                class="input input-bordered input-primary w-full max-w-xs" />
            <button class="btn btn-primary" onclick="cambiarTiempo()">Guardar</button>
        </div>
        <div id="container-form" class="w-full bg-primary flex content-center items-center justify-center">
            <div id="map" class="w-full h-screen"></div>
        </div>
    </main>
    <script>
        var tiempo = 1
        const dispositivosSeleccionados = [];
        var zonas = []
        var contadores = {
            Ranger: 0,
            Fortaleza: 0,
            Hilux: 0,
            Mazda: 0
        }
        var colores = {
            Fortaleza: "green",
            Mazda: "pink",
            Hilux: "blue",
            Ranger: "red"
        }
        function cambiarTiempo() {

            tiempo = document.getElementById('tiempo').value
            document.getElementById('tiempo').value = ""
        }
        var marcadores = [];
        var map;
        var dispositivos = JSON.parse('<%-(dispositivos) %>');
        Ballena = JSON.parse('<%-(Ballena) %>')
        Casco_Central_Uno = JSON.parse('<%-(Casco_Central_Uno) %>')
        Casitas_Cementerio = JSON.parse('<%-(Casitas_Cementerio) %>')
        Excepciones = JSON.parse('<%-(Excepciones) %>')
        Guarico = JSON.parse('<%-(Guarico) %>')
        Nueva_Miranda = JSON.parse('<%-(Nueva_Miranda) %>')
        Salinas = JSON.parse('<%-(Salinas) %>')
        San_Crispulo = JSON.parse('<%-(San_Crispulo) %>')
        Alto_Viento = JSON.parse('<%-(Alto_Viento) %>')
        Los_Campos = JSON.parse('<%-(Los_Campos) %>')
        Haticos = JSON.parse('<%-(Haticos) %>')
        Punta_Leiva = JSON.parse('<%-(Punta_Leiva) %>')
        Jobitos = JSON.parse('<%-(Jobitos) %>')
        Mata_Seca = JSON.parse('<%-(Mata_Seca) %>')
        const zonasAsignadas = {}
        document.addEventListener('DOMContentLoaded', () => {
            const dispositivosList = document.getElementById('dispositivos-list');
            dispositivos.forEach(dispositivo => {
                dispositivosList.innerHTML +=
                    `<div class="form-control mr-4">
                        <label class="label cursor-pointer">
                            <input type="checkbox" id="checkbox-${dispositivo.id_dispositivo}" value="${dispositivo.id_dispositivo}" class="checkbox checkbox-primary" />
                            <span class="label-text">${dispositivo.vehiculo}</span>
                        </label>
                     </div>`
            });
            map = L.map('map').setView([10.719891, -71.515795], 16);
            L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            }).addTo(map);
            dispositivos.forEach(dispositivo => {
                const checkbox = document.getElementById(`checkbox-${dispositivo.id_dispositivo}`);
                checkbox.addEventListener('change', () => {
                    if (checkbox.checked) {
                        // Si está seleccionado, agrega el dispositivo al arreglo
                        dispositivosSeleccionados.push(dispositivo);

                    } else {
                        // Si se deselecciona, elimina el dispositivo del arreglo
                        const index = dispositivosSeleccionados.findIndex(d => d.id_dispositivo === dispositivo.id_dispositivo);
                        if (index !== -1) {
                            dispositivosSeleccionados.splice(index, 1);
                        }
                    }
                    ejecutar();
                });
            });
            setInterval(() => {
                ejecutar();
            }, tiempo * 60 * 1000);
        });
        function ejecutar() {
            marcadores.forEach(marcador => {
                map.removeLayer(marcador);
            });
            marcadores = []; // Limpiamos la lista de marcadores
            dispositivosSeleccionados.forEach(seleccionado => {
                //console.log(seleccionado)
                realizarPeticion(seleccionado.id_dispositivo, seleccionado.vehiculo);
            });
        }
        function realizarPeticion(id_dispositivo, vehiculo) {
            const url = `http://localhost:3000/dispositivo/${id_dispositivo}`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    let datos = JSON.parse(data);
                    if (datos.latitude && datos.longitude) {
                        let lat = parseFloat(datos.latitude);
                        let lng = parseFloat(datos.longitude);
                        var currentMarker = L.marker([lat, lng]).addTo(map).bindTooltip(vehiculo).openTooltip()
                        marcadores.push(currentMarker); // Agregamos el nuevo marcador a la lista
                        fetch(`http://localhost:3000/verificar-zona/${id_dispositivo}`)
                            .then(response => response.json())
                            .then(data => {
                                zonas = data["zonas_asignadas"]
                                zonas.forEach(zonaAsignada => {
                                    if (zonaAsignada != "") {
                                        let coordenadasZona = zona(zonaAsignada.replace(/\s+/g, "_"))
                                        var zonaPolygon = L.polygon(coordenadasZona)
                                        zonasAsignadas[id_dispositivo] = zonaPolygon;
                                        pintarZona(coordenadasZona, colores[vehiculo])
                                    }
                                });
                            })
                            .catch(error => console.error('Error:', error));
                    }
                })
                .catch(error => console.error('Error:', error));
        }
        function pintarZona(zona, color = "red") {
            for (element in zona) {
                for (const dispositivoId in zonasAsignadas) {
                    const zonaAsignada = zonasAsignadas[dispositivoId];
                    if (!zonaAsignada) {
                        // Si no hay zona asignada, elimina el polígono correspondiente
                        map.removeLayer(zonaAsignada);
                    }
                }

                L.polygon(zona[element], { color: color }).addTo(map)
            }
        }
        function zona(zonaasignada) {
            switch (zonaasignada) {
                case 'Nueva_Miranda':
                    return Nueva_Miranda;
                    break;
                case 'Salinas':
                    return Salinas;
                    break;
                case 'Guarico':
                    return Guarico;
                    break;
                case 'Casco_Central_Uno':
                    return Casco_Central_Uno;
                    break;
                case 'Ballena':
                    return Ballena;
                    break;
                case 'Guarico':
                    return Casitas_Cementerio;
                    break;
                case 'San_Crispulo':
                    return San_Crispulo;
                    break;
                case "Ballena":
                    return Ballena;
                    break;
                case "Nueva_Miranda":
                    return Nueva_Miranda;
                    break;
                case "Salinas":
                    return Salinas;
                    break;
                case "Alto_Viento":
                    return Alto_Viento;
                    break;
                case "Los_Campos":
                    return Los_Campos;
                    break;
                case "Haticos":
                    return Haticos;
                    break;
                case "Punta_Leiva":
                    return Punta_Leiva;
                    break;
                case "Jobitos":
                    return Jobitos;
                    break;
                case "Mata_Seca":
                    return Mata_Seca;
                    break;
                default:
                    break;
            }
        }
    </script>
</body>

</html>