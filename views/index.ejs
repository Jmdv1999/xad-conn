<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Dispositivos</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
</head>

<body>
    <script>
        //contaderes para utilizar adelante, cuando los dispositivos esten fuera de la zona asignada
        var contadores = {
            Ranger: 0,
            Fortaleza: 0,
            Hilux: 0,
            Mazda: 0
        }

        //aqui guardaremos la ubicacion de los marcadores a imprimir en el mapa
        var marcadores = [];

        //Para poder hacer instanciaciones del mapa
        var map;

        //Equipos registrados en la base de datos
        var dispositivos = JSON.parse('<%-(dispositivos) %>');

        //Coordenadas
        Ballena = JSON.parse('<%-(Ballena) %>')
        Casco_Central_Uno = JSON.parse('<%-(Casco_Central_Uno) %>')
        Casitas_Cementerio = JSON.parse('<%-(Casitas_Cementerio) %>')
        Excepciones = JSON.parse('<%-(Excepciones) %>')
        Guarico = JSON.parse('<%-(Guarico) %>')
        Nueva_Miranda = JSON.parse('<%-(Nueva_Miranda) %>')
        Salinas = JSON.parse('<%-(Salinas) %>')
        San_Crispulo = JSON.parse('<%-(San_Crispulo) %>')
        Alto_Viento = JSON.parse('<%-(Alto_Viento) %>')
        Los_Campos = JSON.parse('<%-(Los_Campos) %>')
        Haticos = JSON.parse('<%-(Haticos) %>')
        Punta_Leiva = JSON.parse('<%-(Punta_Leiva) %>')
        Jobitos = JSON.parse('<%-(Jobitos) %>')
        Mata_Seca = JSON.parse('<%-(Mata_Seca) %>')

        document.addEventListener('DOMContentLoaded', () => {
            //Instanciamos el mapa
            map = L.map('map').setView([10.719891, -71.515795], 16);

            L.tileLayer('http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                subdomains: ['mt0', 'mt1', 'mt2', 'mt3'],
            }).addTo(map);

            pintarZona(Ballena)
            pintarZona(Casco_Central_Uno)
            pintarZona(Casitas_Cementerio)
            pintarZona(Excepciones)
            pintarZona(Guarico)
            pintarZona(Nueva_Miranda)
            pintarZona(Salinas)
            pintarZona(San_Crispulo)
            pintarZona(Alto_Viento)
            pintarZona(Los_Campos)
            pintarZona(Haticos)
            pintarZona(Punta_Leiva)
            pintarZona(Jobitos)
            pintarZona(Mata_Seca)



            //Obtener coordenadas al hacer click
            map.on('click', function (e) {
                var clickedLatLng = e.latlng;
                console.log([clickedLatLng.lat, clickedLatLng.lng]);
            });

            // setInterval(() => {
            //     ejecutar();
            //     //console.log(`se pinto el mapa a las ${obtenerHoraActual()}`)
            // }, 5000);
        });
        function ejecutar() {
            // Eliminamos los marcadores existentes
            marcadores.forEach(marcador => {
                map.removeLayer(marcador);
            });
            marcadores = []; // Limpiamos la lista de marcadores

            dispositivos.forEach(dispositivo => {
                realizarPeticion(dispositivo.id_dispositivo, dispositivo.vehiculo);

            });
        }
        function realizarPeticion(id_dispositivo, vehiculo) {
            const url = `http://localhost:3000/api/dispositivo/${id_dispositivo}`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    let datos = JSON.parse(data);
                    //console.log(datos)
                    if (datos.latitude && datos.longitude) {
                        let lat = parseFloat(datos.latitude);
                        let lng = parseFloat(datos.longitude);

                        var currentMarker = L.marker([lat, lng]).addTo(map).bindTooltip(vehiculo).openTooltip()
                        marcadores.push(currentMarker); // Agregamos el nuevo marcador a la lista

                        fetch(`http://localhost:3000/verificar-zona/${id_dispositivo}`)
                            .then(response => response.json())
                            .then(data => {
                                zonas = data["zonas_asignadas"]

                                zonas.forEach(zonaAsignada => {
                                    if (zonaAsignada != "") {
                                        let coordenadasZona = zona(zonaAsignada.replace(/\s+/g, "_"))
                                        var zonaPolygon = L.polygon(coordenadasZona)
                                        // Verificar si el marcador está dentro del polígono
                                        if (zonaPolygon.getBounds().contains(currentMarker.getLatLng())) {
                                            (contadores[vehiculo]) = 0
                                            console.log(`El vehiculo ${vehiculo} está dentro de la zona ${zonaAsignada}`);
                                        } else {
                                            contadores[vehiculo] = contadores[vehiculo] + 1

                                            console.log(`El vehiculo ${vehiculo} está fuera de la zona ${zonaAsignada}`);
                                            if (contadores[vehiculo] % 3 === 0) {
                                                //enviarMensajeDiscord(`El vehiculo  ${vehiculo} está fuera de la zona ${zona_asignada}`, `hay ${contadorFortaleza} muestras fuera de su zona asignada`, "https://discord.com/api/webhooks/1267911462861406248/PHWOzhTiiCBv2nIbUKGRUq03GfFWCEGG1tYygnQcYvYl2tfideQfVDeDOpjWzn0WNBVq");
                                                //console.log(`total de muestras ${contadores[vehiculo]}`)
                                            }
                                        }
                                    }
                                        
                                });



                            })
                            .catch(error => console.error('Error:', error));

                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function pintarZona(zona) {
            for (element in zona) {
                L.polygon(zona[element], { color: 'red' }).addTo(map)
            }
        }

        function zona(zonaasignada) {
            switch (zonaasignada) {
                case 'Nueva_Miranda':
                    return Nueva_Miranda;
                    break;
                case 'Salinas':
                    return Salinas;
                    break;
                case 'Guarico':
                    return Guarico;
                    break;
                case 'Casco_Central_1':
                    return Casco_Central_1;
                    break;
                case 'Ballena':
                    return Ballena;
                    break;
                case 'Guarico':
                    return Casitas_Cementerio;
                    break;
                case 'Casco_Central_1':
                    return San_Crispulo;
                    break;
                default:
                    break;
            }
        }
        function enviarMensajeDiscord(titulo, mensaje, webhookurl) {
            const json_data = {
                content: null,
                username: "SapoBot",
                avatar_url: "https://pbs.twimg.com/media/DZlSgoJWkAAc8HS?format=jpg&name=360x360",
                embeds: [
                    {
                        title: titulo,
                        description: mensaje,
                        color: 5375,
                        timestamp: new Date().toISOString()
                    }
                ]
            };

            fetch(webhookurl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(json_data)
            })
                .then(response => response.text())
                .then(result => {
                    console.log("Mensaje enviado correctamente:", result);
                })
                .catch(error => {
                    console.error("Error al enviar el mensaje:", error);
                });
        }




    </script>


    <div id="map"></div>

    <style>
        #map {
            height: 800px;
            width: 100%;
        }
    </style>

</body>

</html>